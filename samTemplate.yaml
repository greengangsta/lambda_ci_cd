AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: CD Demo Lambda
Resources:
  CDDemoLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      CodeUri: ./Lambda
      Description: 'Lambda function for CD Demo'
      MemorySize: 128
      Timeout: 30
      Role: 'arn:aws:iam::706374939365:role/MyLambdaRole'
      Events:
        helloAPI:
          Type: Api
          Properties:
            Path: /hello
            Method: get
      Environment:
        Variables:
          REGION: ap-south-1
  CDDemoLambda2:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.6
      CodeUri: ./Lambda2
      Description: 'Lambda function q for CD Demo'
      MemorySize: 128
      Timeout: 30
      Role: 'arn:aws:iam::706374939365:role/MyLambdaRole'
      Events:
        helloAPI:
          Type: Api
          Properties:
            Path: /hello2
            Method: get
      Environment:
        Variables:
          REGION: ap-south-1
  S3SRTBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
    DeletionPolicy: Retain
  S3WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3SRTBucket
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${S3SRTBucket}/*"
            Principal: "*"
Outputs:
  BucketName:
    Value: !Ref S3SRTBucket
    Description: The created bucket name
  WebsiteURL:
    Value: !GetAtt S3SRTBucket.WebsiteURL
    Description: URL for the website hosted on S3
  S3SRTBucketSecureURL:
    Value: !Sub
        - https://${Domain}
        - Domain: !GetAtt S3SRTBucket.DomainName
    Description: Name of the S3 bucket to hold website content
  